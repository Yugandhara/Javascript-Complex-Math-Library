Copyright (c) 2012 Patrick Roberts

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the
Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

GENERAL SUMMARY
This project is designed for the general use of complex math.
It contains most, if not all the necessary functions that are
commonly used in complex mathematics. If there s a function
that is missing, feel free to fork the project and make a pull
request with your additions. Also, I am aware that this project
is not error free. For extreme conditions, handling the calculations
as the input tends to infinity or zero can be problematic. Lastly,
note that the original purpose of this library was for use in a
fractal rendering program.

DIRECTIONS
To include this library in your program, simply use the following
HTML command:

<script type="text/javascript" src="Complex.js"></script>

After including that in the head, your program should be able
to use complex math quite easily (assuming that Complex.js is in
the same directory as your program).

-CREATING A NEW COMPLEX NUMBER
Simply use the Javascript command:

var foo = new Complex(0,0);
// OR
var foo = Complex(0,0);

...and that should create the Complex zero. Note that the following
does NOT do the same thing:

var foo = new Number(0);

This will NOT be able to be manipulated by the Complex library,
excluding the function "Complex.prototype.pow" which requires
a Number as the argument.

You may also declare a Complex by its polar coordinates through
the following function:

var foo = Complex.polar(1,Math.PI/2);

This creates the Complex imaginary unit. Note that the declaration
omits the "new." This is because Complex.polar returns a
new Complex internally.

-FUNCTIONS VS OPERATORS
There are two main categories of mathematical manipulations in
this library, as noted by the name of this section. Functions
are a manipulation that require a single input variable, such
as:

var tanFoo = Complex.tan(foo);
var sqrtFoo = Complex.sqrt(foo);
var conjFoo = Complex.conj(foo);

There are many others, but to tell them apart, there is a
differece. They follow the prefix "Complex." rather than
"Complex.prototype." Operators are the opposite, and they
require two input variables, one variable is the caller and
the other is the argument. The following shows how to use
an operator:

var twoFoo = foo.add(foo);

Again, there are a few more, but they follow the same general
standards.

-PARSING USER INPUT
The library includes a function for parsing a mathematical
expression (generally user input) and silently fails if it
cannot parse the function correctly. Below is the documentation
for the Complex parser:

	// Complex expression parser
	// str:String
	//    human-readable Complex math expression
	// args:Array[String]
	//    array of arguments for the expected function,
	//    each index containing the name of the variable
	//    in the human-readable string
	// skipFormat:Boolean
	//    if false or omitted, auto-formats math expression
	//    it is recommended to call Complex.formatFunction
	//    on string passed before calling Complex.parseFunction
	//    with skipFormat set to true
	Complex.parseFunction = function (str, args, skipFormat)

So now you can make a complex math calculator quite easily with this library!

-CONCLUSION
If you have gotten this far, congratulations. You have finished
the tutorial for this library and are now prepared to use it
in your program.